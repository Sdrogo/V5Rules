name: Android CI & Release

on:
  push:
    branches:
      - "master"
      - "feature/*"
      - "bugfix/*"
    # Il workflow si attiva anche quando fai il push di un tag (es. v1.0.1)
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - "master"
      - "feature/*"
      - "bugfix/*"

jobs:
  # JOB 1: ANALISI DEL CODICE (NON CAMBIA)
  # Questo job viene eseguito su ogni push e PR per garantire la qualità del codice.
  analyze:
    runs-on: ubuntu-latest
    permissions:
      security-events: write # Permesso per CodeQL
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Create google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java-kotlin

      - name: Build Debug for Analysis
        run: ./gradlew assembleDebug

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # JOB 2: CREAZIONE DELL'APK FIRMATO (CON VERSIONING)
  # Questo job viene eseguito solo dopo un merge su master o su push di un tag.
  build-and-release:
    needs: analyze
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permesso per caricare l'artefatto

    steps:
      - name: Checkout repository
        # 'fetch-depth: 0' è necessario per contare tutti i commit per il versionCode
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Create google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Decode Keystore
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # Step per calcolare versionCode e versionName
      - name: Set Version Name and Code
        run: |
          # Se è un tag, usa il nome del tag. Altrimenti, crea un nome per il build di master.
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "APP_VERSION_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "APP_VERSION_NAME=master-build-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
          # Conta il numero totale di commit e lo imposta come versionCode
          echo "APP_VERSION_CODE=$(git rev-list --count HEAD)" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Passiamo le versioni e i secret a Gradle
      - name: Build Signed Release APK
        run: ./gradlew clean assembleRelease -PappVersionCode=${{ env.APP_VERSION_CODE }} -PappVersionName=${{ env.APP_VERSION_NAME }}
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}

      # Carichiamo l'artefatto con un nome significativo
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: V5Rules-Release-${{ env.APP_VERSION_NAME }}
          # Usiamo un wildcard (*) per trovare l'APK generato dinamicamente
          path: app/build/outputs/apk/release/*.apk
