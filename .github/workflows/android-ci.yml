# Nome del workflow unificato
name: Android CI & Release

on:
  push:
    branches:
      - "master"
      - "feature/*"
      - "bugfix/*"
  pull_request:
    branches:
      - "master"
      - "feature/*"
      - "bugfix/*"

jobs:
  # Job 1: Build, analyze, and test on every push & PR
  build-and-analyze:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Create google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      # Decode keystore for the build. This makes signing available for all build types.
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Initialize CodeQL before building
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java-kotlin

      # Build the release version for analysis. Pass signing credentials as env variables.
      - name: Build Release for Analysis
        run: ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 2: Upload Release APK, only on push to master
  upload-release-apk:
    needs: build-and-analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      # No need to build again, we can download the artifact from the previous job.
      # This is more efficient but requires setting up artifact upload/download between jobs.
      # For simplicity, we will just rebuild here. If your build gets very long, we can optimize this.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json
      
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APK
        run: ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: V5Rules-Release-APK
          path: app/build/outputs/apk/release/app-release.apk
